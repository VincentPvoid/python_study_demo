# 一些numpy中的方法的使用例子

import numpy as np

# np.sum的axis使用例子

# 初始化一个三维数组
# 当需要定位某个数时，获取值的形式为a[i][j][k]
# 在下面的例子中，i的下标范围为[0,1]，j为[0,2]，k为[0,3]
a = np.array([[[1, 2, 3, 2], [1, 2, 3, 1], [2, 3, 4, 1]],
              [[1, 0, 2, 0], [2, 1, 2, 0], [2, 1, 1, 1]]])

# 对应的下标范围也可以使用shape属性进行查看（注意这里是具体数量，对应下标需要减1）
print(a.shape)  # (2, 3, 4)

# 可以使用ndim属性查看数组维度
print(a.ndim)  # 3

# axis默认为None，表示对所有元素求和；把所有项相加计算，结果只有一个值
print(np.sum(a))  # 38

# axis=0，表示在第1个维度上求和
# 在i的维度上进行求和，结果为3x4的矩阵；简单地说就是shape属性中去掉i的值之后的结果
# 结果对应矩阵项 公式 s[j,k] = a[0][j][k] + a[1][j][k] + a[2][j][k] + ... a[i][j][k]
print(np.sum(a, axis=0))  # shape为(3,4)

# axis=1，表示在第2个维度上求和
# 在j的维度上进行求和，结果为2x4的矩阵；简单地说就是shape属性中去掉j的值之后的结果
# 结果对应矩阵项 公式 s[i,k] = a[i][0][k] + a[i][1][k] + a[i][2][k] + ... a[i][j][k]
print(np.sum(a, axis=1))  # shape为(2,4)

# axis=1，表示在第2个维度上求和
# 在k的维度上进行求和，结果为2x3的矩阵；简单地说就是shape属性中去掉k的值之后的结果
# 结果对应矩阵项 公式 s[j,k] = a[i][j][0] + a[i][j][1] + a[i][j][2] + ... a[i][j][k]
print(np.sum(a, axis=2))  # shape为(2,3)

# np.bincount()的使用例子
# 把数组中的值作为下标，出现次数作为值，生成新数组
# 适合用于统计值不大的数组中每个元素的出现次数
# 注意：元素应为int类型；为float类型时只会统计小数点前面的数值；为其他类型时报错
b = [3, 6, 4, 6, 6, 3, 7]
# b = [0.3, 0.3, 1.6, 1.2]
# b = ['a', 'b', 'a']

print(b)
print(np.bincount(b))

# argmax() 返回值最大的数据对应的下标值
c = [2, 1, 0, 5, 3, 0, 2, 1]

print(np.argmax(c))


# np.random.randint(最小值，最大值，数量) 随机生成在范围内指定数量的整数
d = [[-0.02708305 , 5.0215929],
      [-5.49252256,  6.27366991],
      [-5.37691608,  1.51403209],
      [-5.37872006,  2.16059225],
      [ 9.58333171,  8.10916554]]
d = np.array(d)

print(d[np.random.randint(0, d.shape[0], 2)])


# np.argmin() 返回值最小的数据对应的下标值
# np.mean() 平均值计算
# 数组的布尔下标类型，类似于js中Array.filter()的效果，在生成的新数组中保留原数组中对应位置为True的值
e = [[1,33,2],[6,4,22],[824,111,87],[14,32,11],[76,5,123]]
e = np.array(e)
index_test = np.argmin(e, axis=1) # [0 1 2 2 1]
print(e[index_test==2])
# axis=0 每列相加求平均值；axis=1 每行相加求平均值；默认None，全部相加求平均值
print(np.mean(e[index_test==2], axis=1))

# f = np.array([[1],[2],[3]])
print(index_test.shape)


# np.random.rand() 生成指定大小的随机矩阵
f = np.random.rand(5, 3) 
print(f)
print(f.T)



R = np.array([[4,0,2,0,1],
              [0,2,3,0,0],
              [1,0,2,4,0],
              [5,0,0,3,1],
              [0,0,1,5,1],
              [0,3,2,4,1]])

# 取出R矩阵的第一行
print(R[0])
# 取出R矩阵的第一列
print(R[:,0])